https://www.youtube.com/watch?v=HiXLkL42tMU&t=136s




STATE y PROPS 

- Por defecto solo los componentes de tipo class son los que pueden tener estado local (state)
- Todos los componentes pueden recibir parametros (props) y se pasan en forma de JSX
- Cada vez que el valor de un state o prop cambia, el componente que lo est√© usando se va a volver a renderizar
- El estado de un componente solo puede ser cambiado por aquel componente que lo creo
- Los props no pueden ser cambiados, son de solo-lectura

Componente({x:"Hola",y:"Chau"})


<Componente x="Hola" y="Chau"/>


DESTRUCTURING 

let arr = [1,2,3]

let [uno,dos] = arr

let uno = arr[0]
let dos = arr[1]
let tres = arr[2]


let obj = {x:1,y:2,z:3}

let {x:uno,y:dos,z:tres} = obj
let {x:x,y:y,z:z} = obj

let {x,y,z} = obj

let x = obj.x
let y = obj.y
let z = obj.z



let arr = [1,2,3,4,5]

arr.forEach((e,i)=>{}) : void


arr.map((e,i)=>{}) : Array





OPERADOR REST / SPREAD (...)


let arr = [1,2,3]
let copia = arr.slice(0)

let copia = [...arr]


function foo(...params){
    console.log(params) //[1,2,3]
}


foo(1,2,3)












SYMBOL
PROTOCOLO ITERABLE - ITERATOR
GENERATOR FUNCTION



function foo(i){
    this
}


let copia = foo.bind(null,i)



PUBLICACION Y SUBSCRIPCION

REDUX - REACT-REDUX


store : Analogo al state de un componente (createStore/createContext/this.state={})
reducer : funcion pura - Nos describe como va a verse el store en un momento dado de la aplicacion
actions : funcion pura - Analogos a los metodos de un componente

Provider : Analogo a Provider de Context API y nos sirve para publicar el store en toda la aplicacion
connect()() : Es un HoC que conecta el componente con redux. Toma dos parametros, ambos dos son funciones que tienen que retornar un objeto. La primera sirve para usar nuestro store actual y la segunda sirve para habilitar actions en el componente


CURRYING 

function connect(){

    return function(){

    }

}


let connect => () => () => {

}




let connect => (props) => (Componente) => {
    
    class Wrapper extends React.Component {
        render(){
            return <Componente {...props}/>
        }
    }

}







src/
    |_index.js
    |_estilos.css
    |_ui/
        |_layout/
            |_App.js
            |_Footer.js
            |_Header.js
            |_Main.js
        |_paginas/
        |_componentes
    |_api/
        |_store.js
        |_reducer.js
        |_actions.js


https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en



//archivo1.js

let a = true

//ES6
export default a
export a 

//CommonJS
//module.exports === {}
//module.exports = a
module.exports.a = a




//archivo2.js
//ES6
import {a} from "./modulo2"
import {connect} from "react-redux"

//CommonJS
const connect = require("react-redux").connect


